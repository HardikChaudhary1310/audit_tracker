<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"> <!-- Updated Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <title>Login and Sign-Up</title>
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Basic Styles */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
            background: linear-gradient(90deg, #674dcd, rgb(56, 131, 196), #52d7ee);
            transition: background-color 0.36s, box-shadow 0.5s;
            background-image: var(--gradient);
            animation: gradientBackground 10s infinite;
            overflow: hidden; /* Prevent scrollbars during animation */
        }

        @keyframes gradientBackground {
            0%, 100% { background: linear-gradient(to bottom right, #674dcd, #f0f8ff); }
            50% { background: linear-gradient(to top left, #52d7ee, #674dcd); }
        }

        .container {
            position: relative;
            width: 768px;
            max-width: 95%;
            min-height: 500px; /* Increased min-height */
            border-radius: 15px; /* Slightly less rounded */
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); /* Softer shadow */
            overflow: hidden;
            display: flex;
            background-color: #ffffff;
        }

        .form-container {
            position: absolute;
            top: 0;
            height: 100%;
            transition: all 0.6s ease-in-out;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 50%;
            padding: 40px; /* Keep padding */
        }

        .form-container h3 {
            margin-bottom: 20px;
            font-weight: bold;
            color: #333;
        }

        .input-group {
            margin-bottom: 18px; /* Increased spacing */
            width: 100%;
        }

        /* Removed separate labels, using placeholders */
        input {
            width: 100%;
            border: 1px solid #ddd; /* Lighter border */
            background-color: #f7f7f7; /* Lighter background */
            padding: 12px 15px;
            font-size: 14px;
            border-radius: 8px;
            outline: none;
            transition: border-color 0.3s;
        }
        input:focus {
            border-color: #674dcd; /* Highlight focus */
        }

        .password-wrapper {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            font-size: 16px;
            color: #aaa; /* Lighter icon color */
            transition: color 0.3s;
        }
        .toggle-password:hover {
            color: #674dcd;
        }

        button[type="submit"] {
            width: auto;
            min-width: 140px; /* Slightly wider */
            padding: 12px 35px;
            background: linear-gradient(90deg, #512da8, #7b1fa2);
            color: #fff;
            font-size: 14px;
            font-weight: bold;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-top: 15px; /* More space above button */
            margin-bottom: 15px; /* Space below button */
        }
        button[type="submit"]:hover {
            background: linear-gradient(90deg, #7b1fa2, #512da8);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
            transform: translateY(-2px);
        }
        button[type="submit"]:disabled {
             background: #ccc;
             cursor: not-allowed;
             opacity: 0.7;
        }
        button[type="submit"]:active {
            transform: translateY(0);
        }

        .message-area {
             width: 100%;
             min-height: 25px; /* Reserve space */
             text-align: center;
             margin-top: 5px;
             margin-bottom: 10px;
             font-weight: bold;
             font-size: 14px;
        }
        .message-area.success {
             color: #28a745; /* Bootstrap success green */
        }
         .message-area.error {
             color: #dc3545; /* Bootstrap danger red */
        }


        .error { /* Specific input error styling */
            color: #dc3545;
            font-size: 12px; /* Smaller */
            margin-top: 4px;
            min-height: 16px;
            text-align: left;
            width: 100%;
        }

        /* Overlay styles */
        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100;
        }
        .overlay {
            background: linear-gradient(to bottom right, #6318b4, #3572da);
            background-repeat: no-repeat;
            background-size: cover;
            background-position: 0 0;
            color: #fff;
            position: relative;
            left: -100%;
            height: 100%;
            width: 200%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }
        .overlay-panel {
            position: absolute;
            top: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 0 40px;
            height: 100%;
            width: 50%;
            text-align: center;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }
        .overlay-left {
            transform: translateX(-20%); /* Initially hidden */
        }
        .overlay-right {
            right: 0;
            transform: translateX(0);
        }
        .overlay h3 {
            margin-bottom: 15px;
            font-weight: bold;
        }
        .overlay p {
            margin-bottom: 25px;
            font-size: 14px;
            line-height: 1.5;
        }
        button.ghost {
            background: transparent;
            border: 2px solid #fff;
            color: #fff;
            font-size: 12px;
            font-weight: bold;
            padding: 10px 40px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        button.ghost:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        button.ghost:active {
            transform: scale(0.98);
        }

        /* Animation / Panel Switching */
        .container.right-panel-active .sign-in-container {
            transform: translateX(100%);
        }
        .container.right-panel-active .sign-up-container {
            transform: translateX(100%);
            opacity: 1;
            z-index: 5;
            animation: show 0.6s;
        }
        .container.right-panel-active .overlay-container {
            transform: translateX(-100%);
        }
        .container.right-panel-active .overlay {
            transform: translateX(50%);
        }
        .container.right-panel-active .overlay-left {
            transform: translateX(0);
        }
        .container.right-panel-active .overlay-right {
            transform: translateX(20%);
        }

        .sign-in-container {
            left: 0; width: 50%; z-index: 2;
        }
        .sign-up-container {
            left: 0; width: 50%; opacity: 0; z-index: 1;
        }

        @keyframes show {
            0%, 49.99% { opacity: 0; z-index: 1; }
            50%, 100% { opacity: 1; z-index: 5; }
        }
    </style>
</head>
<body>
    <div class="container" id="container">

        <!-- Sign Up Form -->
        <div class="form-container sign-up-container">
            <form id="signUpForm" onsubmit="handleSubmit(event)">
                <h3>Create Account</h3>
                <div class="message-area" id="signUpMessageArea"></div> <!-- Message area -->
                <!-- Social login icons removed for simplicity -->
                <div class="input-group">
                    <input type="email" id="signUpEmail" name="email" required placeholder="Email (@shivalikbank.com)">
                    <div class="error" id="signUpEmailError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="signUpPassword" name="password" required placeholder="Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('signUpPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="signUpPasswordError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Confirm Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('confirmPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="confirmPasswordError"></div>
                </div>
                <button type="submit">Sign Up</button>
            </form>
        </div>

        <!-- Sign In Form -->
        <div class="form-container sign-in-container">
            <form id="signInForm" onsubmit="handleSubmit(event)">
                <h3>Sign In</h3>
                <div class="message-area" id="signInMessageArea"></div> <!-- Message area -->
                 <!-- Social login icons removed for simplicity -->
                <div class="input-group">
                    <input type="email" id="signInEmail" name="email" required placeholder="Email (@shivalikbank.com)">
                    <div class="error" id="signInEmailError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="signInPassword" name="password" required placeholder="Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('signInPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="signInPasswordError"></div>
                </div>
                <!-- <a href="#">Forgot your password?</a> -->
                <button type="submit">Sign In</button>
            </form>
        </div>

        <!-- Overlay Panels -->
        <div class="overlay-container">
            <div class="overlay">
                 <!-- Left Overlay Panel (Shown when Sign Up is active) -->
                 <div class="overlay-panel overlay-left">
                    <h3>Welcome Back!</h3>
                    <p>Already have an account? Sign in to access your dashboard.</p>
                    <button class="ghost" id="signInButton">Sign In</button>
                </div>
                 <!-- Right Overlay Panel (Shown when Sign In is active) -->
                <div class="overlay-panel overlay-right">
                    <h3>Hello, Friend!</h3>
                    <p>New here? Enter your details and start your journey with us.</p>
                    <button class="ghost" id="signUpButton">Sign Up</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const signUpButton = document.getElementById('signUpButton');
        const signInButton = document.getElementById('signInButton');
        const container = document.getElementById('container');

        // State tracking
        let isLoginActive = true; // Start with Sign In active

        signUpButton.addEventListener('click', () => {
            container.classList.add('right-panel-active');
            isLoginActive = false;
            clearMessagesAndErrors();
        });

        signInButton.addEventListener('click', () => {
            container.classList.remove('right-panel-active');
            isLoginActive = true;
            clearMessagesAndErrors();
        });

        // Toggle password visibility
        function togglePasswordVisibility(inputId) {
            const input = document.getElementById(inputId);
            const icon = input.nextElementSibling.querySelector('i');
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Clear all error/message fields
        function clearMessagesAndErrors() {
             // Use querySelectorAll for efficiency if many fields
            document.querySelectorAll('.error').forEach(el => el.textContent = '');
            document.querySelectorAll('.message-area').forEach(el => {
                el.textContent = '';
                el.className = 'message-area'; // Reset class
            });
        }

        // Main form submission handler
        async function handleSubmit(event) {
            event.preventDefault();
            clearMessagesAndErrors();

            // --- Identify Active Form Elements ---
            const formId = isLoginActive ? 'signInForm' : 'signUpForm';
            const formElement = document.getElementById(formId);
            const emailInput = formElement.querySelector('input[name="email"]');
            const passwordInput = formElement.querySelector('input[name="password"]');
            const emailErrorElem = document.getElementById(isLoginActive ? 'signInEmailError' : 'signUpEmailError');
            const passwordErrorElem = document.getElementById(isLoginActive ? 'signInPasswordError' : 'signUpPasswordError');
            const messageAreaElem = document.getElementById(isLoginActive ? 'signInMessageArea' : 'signUpMessageArea');
            const submitButton = formElement.querySelector('button[type="submit"]');

            let confirmPasswordInput, confirmPasswordErrorElem;
            if (!isLoginActive) {
                confirmPasswordInput = formElement.querySelector('input[name="confirmPassword"]');
                confirmPasswordErrorElem = document.getElementById('confirmPasswordError');
            }

            // --- Get Form Values ---
            const email = emailInput.value.trim();
            const password = passwordInput.value.trim();
            const confirmPassword = !isLoginActive ? confirmPasswordInput.value.trim() : null;

            // --- Frontend Validation ---
            let isValid = true;
            if (!email) {
                emailErrorElem.textContent = "Email is required."; isValid = false;
            } else if (!email.endsWith("@shivalikbank.com")) {
                emailErrorElem.textContent = "Email must end with @shivalikbank.com."; isValid = false;
            }

            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{6,}$/;
            if (!password) {
                passwordErrorElem.textContent = "Password is required."; isValid = false;
            } else if (!passwordRegex.test(password)) {
                passwordErrorElem.textContent = "Min 6 chars: 1 upper, 1 lower, 1 digit, 1 symbol."; isValid = false; // Shorter message
            }

            if (!isLoginActive) {
                if (!confirmPassword) {
                    confirmPasswordErrorElem.textContent = "Please confirm your password."; isValid = false;
                } else if (password && password !== confirmPassword) {
                    confirmPasswordErrorElem.textContent = "Passwords do not match."; isValid = false;
                }
            }

            if (!isValid) {
                messageAreaElem.textContent = "Please fix the errors above.";
                messageAreaElem.className = 'message-area error'; // Use error class
                return;
            }

            // --- Prepare & Send Request ---
            const formData = { username: email, password };
            if (!isLoginActive) {
                formData.confirmPassword = confirmPassword;
            }

            submitButton.disabled = true;
            submitButton.textContent = isLoginActive ? 'Signing In...' : 'Signing Up...';

            try {
                const response = await fetch(isLoginActive ? '/login' : '/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData),
                });

                // Try parsing JSON response, even for errors
                let data = {};
                try {
                     data = await response.json();
                } catch (parseError) {
                    // Handle cases where the response is not JSON (e.g., HTML error page)
                    console.error("Failed to parse JSON response:", parseError);
                     data = { message: "Received an unexpected response from the server." };
                     if (!response.ok) { // If status indicates error but no JSON
                        messageAreaElem.className = 'message-area error';
                        messageAreaElem.textContent = data.message + ` (Status: ${response.status})`;
                     } else { // Should not happen often if backend is consistent
                          messageAreaElem.className = 'message-area error';
                          messageAreaElem.textContent = "Received an unexpected successful response.";
                     }
                     // Stop processing if parsing failed on error or unexpected success
                     return; // Exit handleSubmit
                }


                if (!response.ok) {
                    // Display specific backend error message
                    messageAreaElem.textContent = data.message || `Request failed with status ${response.status}`;
                    messageAreaElem.className = 'message-area error';
                } else {
                    // Display success message
                    messageAreaElem.textContent = data.message;
                    messageAreaElem.className = 'message-area success';

                    if (isLoginActive) {
                        // Login Success: Redirect after delay
                        submitButton.textContent = 'Success!';
                        setTimeout(() => { window.location.href = "/home"; }, 1500);
                    } else {
                        // Signup Success: Inform user, clear form, do not redirect
                         formElement.reset(); // Clear the signup form
                         submitButton.textContent = 'Sign Up'; // Reset button text (no disable needed now)
                         submitButton.disabled = false; // Re-enable after success message shown
                        // No redirect here, user needs to verify email
                    }
                }
            } catch (networkError) {
                // Handle network errors
                console.error("Network or fetch error:", networkError);
                messageAreaElem.textContent = "Cannot reach server. Please check your connection.";
                messageAreaElem.className = 'message-area error';
            } finally {
                // Re-enable button IF NOT login success (which redirects)
                if (isLoginActive && messageAreaElem.className.includes('success')) {
                     // Keep button disabled/showing success during redirect delay
                } else if (!isLoginActive && messageAreaElem.className.includes('success')) {
                     // Already handled resetting/enabling signup button above
                }
                 else {
                     submitButton.disabled = false;
                     submitButton.textContent = isLoginActive ? 'Sign In' : 'Sign Up';
                }
            }
        }
    </script>
</body>
</html>