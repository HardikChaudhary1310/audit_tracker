<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <title>Login and Sign-Up</title>
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Basic Styles */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
            background: linear-gradient(90deg, #674dcd, rgb(56, 131, 196), #52d7ee);
            transition: background-color 0.36s, box-shadow 0.5s;
            background-image: var(--gradient);
            animation: gradientBackground 10s infinite;
        }

        @keyframes gradientBackground {
        0% {
            background: linear-gradient(to bottom, #674dcd, #f0f8ff);
            background-position: left;
        }
        25% {
            background: linear-gradient(to bottom, #674dcd, #f0f8ff);
            background-position: right
        }
        50% {
            background: linear-gradient(to bottom, #674dcd, #f0f8ff);
            background-position: left;
        }
        75% {
            background: linear-gradient(to bottom, #674dcd, #f0f8ff);
            background-position: right
        }
        100% {
            background: linear-gradient(to bottom, #674dcd, #f0f8ff);
            background-position: left;
        }
        }


        .container {
            position: relative;
            width: 768px;
            max-width: 100%;
            min-height: 480px;
            border-radius: 35px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.40);
            overflow: hidden;
            display: flex;
        }

        .form-container, .overlay-container {
            position: absolute;
            top: 0;
            height: 100%;
            transition: transform 0.6s ease-in-out;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 50%;
        }

        .form-container {
            left: 0;
            padding: 40px;
            background-color: white;
            z-index: 2;
        }

        .form-container h2 { /* Using h3 in HTML, let's match */
            margin-bottom: 20px;
        }

        .social-login {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }

        .social-login button {
            background: none;
            border: 1px solid #ccc;
            border-radius: 50%;
            width: 30px; /* Adjusted */
            height: 30px; /* Adjusted */
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
            overflow: hidden; /* Ensure icon doesn't overflow */
        }

        .social-login button img {
             width: 18px; /* Adjusted */
            height: 18px; /* Adjusted */
            border-radius: 50%; /* Keep image rounded if needed */
        }
         /* Added FontAwesome icon styling */
        .social-login button i {
            font-size: 16px; /* Adjust icon size */
            color: #555; /* Adjust icon color */
        }

        .social-login button:hover {
            background-color: #f0f0f0;
        }
        .social-login button:hover i {
             color: #007bff; /* Example hover color */
        }

        .input-group {
            margin-bottom: 15px;
            width: 100%;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        input {
            width: 100%;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            padding: 14px 19px;
            font-size: 13px;
            border-radius: 15px;
            outline: none;
            /* size:inherit; -> not a valid property */
        }

        .password-wrapper {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%; /* Center vertically relative to input */
            transform: translateY(-50%);
            cursor: pointer;
            font-size: 14px;
            color: #777;
            user-select: none; /* Prevent text selection */
            padding: 5px; /* Increase clickable area */
        }

        .toggle-password:hover {
            color: #333;
        }

        button[type="submit"] {
            width: 100%;
            padding: 11px;
            background-color: #512da8;
            color: #fff;
            font-size: 12px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s, border 0.3s; /* Added transitions */
            margin-top: 10px; /* Added some space above button */
        }

        button[type="submit"]:hover {
            background-color: #fff;
            color: #512da8;
            border: 1px solid #512da8;
        }

        .signup-link {
            text-align: center;
            margin-top: 20px;
        }

        .signup-link a {
            color: #007BFF;
            text-decoration: none;
            font-weight: bold;
        }

        .signup-link a:hover {
            text-decoration: underline;
        }

        .overlay-container {
            right: 0;
            background: linear-gradient(to bottom right, #6318b4, #3572da);
            color: white;
            padding: 40px;
            text-align: center;
            z-index: 1;
            width: 50%;
        }
        /* Selectors were slightly off, ensure they target correctly */
        .container.sign-up-mode .form-container.sign-in-form {
            transform: translateX(100%);
            opacity: 0;
            z-index: 1; /* Send sign-in form behind during transition */
        }
        .container.sign-up-mode .form-container.sign-up-form {
             transform: translateX(0%); /* Bring sign-up form in */
             opacity: 1;
             z-index: 5; /* Ensure sign-up form is on top */
        }

        .container.sign-up-mode .overlay-container {
            transform: translateX(-100%);
        }
         /* Added explicit transitions for overlay panels */
        .overlay {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100; /* Ensure overlay is above forms initially */
        }
        .container.sign-up-mode .overlay {
            transform: translateX(-100%);
        }
         .overlay-panel {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 40px;
            text-align: center;
            top: 0;
            height: 100%;
            width: 50%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }
        .overlay-left {
            transform: translateX(-20%); /* Start hidden left */
        }
         .container.sign-up-mode .overlay-left {
            transform: translateX(0); /* Bring in */
        }
        .overlay-right {
             right: 0;
             transform: translateX(0); /* Start visible right */
        }
        .container.sign-up-mode .overlay-right {
            transform: translateX(20%); /* Move away */
        }
         .overlay-container button { /* Style overlay buttons */
             background-color: transparent; /* Make overlay buttons ghost buttons */
             border: 1px solid #fff;
             color: #fff;
             font-size: 12px;
             padding: 10px 40px;
             border-radius: 20px;
             cursor: pointer;
             transition: background-color 0.3s;
             margin-top: 15px;
        }
        .overlay-container button:hover {
             background-color: rgba(255, 255, 255, 0.2); /* Slight background on hover */
        }


        .error {
            color: red;
            font-size: 0.8em; /* Smaller font for errors */
            margin-top: 3px; /* Space below input */
            min-height: 1em; /* Prevent layout shifts */
        }
        /* Styles for better transitions (Optional but recommended) */
        .form-container {
             transition: all 0.6s ease-in-out; /* Apply transition to the form container itself */
        }
        .container.sign-up-mode .form-container {
            transform: translateX(100%); /* Move sign-in form */
        }
        /* You might need separate containers or logic to handle swapping forms smoothly */


    </style>
</head>
<body>
    <!-- NOTE: The original HTML had only one form-container. For smoother transitions,
         it's often better to have two distinct form containers, one for sign-in and one for sign-up,
         and toggle their visibility/position. However, sticking to the original structure for now. -->
    <div class="container" id="container">
        <!-- Form Container (Handles both Login and Signup based on JS toggle) -->
        <div class="form-container">
            <h3 id="formTitle">Sign In</h3>

            <!-- Social Login Icons (Using FontAwesome) -->
             <div class="social-login">
                <button title="Twitter"><i class="fab fa-twitter"></i></button>
                <button title="Facebook"><i class="fab fa-facebook-f"></i></button>
                <button title="Google"><i class="fab fa-google"></i></button>
                <button title="LinkedIn"><i class="fab fa-linkedin-in"></i></button>
            </div>
            <span style="font-size: 12px; margin-bottom: 15px; color: #888;" id="formHint">or use your email for registration</span>


            <form id="authForm" onsubmit="handleSubmit(event)">
                 <!-- Add hidden input to track mode if needed, though `isLogin` JS var handles it -->
                <div class="input-group" id="usernameGroup" style="display: none;"> <!-- Initially hidden -->
                    <label for="username">Username</label>
                    <input type="text" id="username" name="username" placeholder="Choose a username">
                    <div class="error" id="usernameError"></div>
                </div>
                <div class="input-group">
                    <label for="email">Email ID</label>
                    <input type="email" id="email" name="email" required placeholder="Enter your @shivalikbank.com email">
                    <div class="error" id="emailError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required placeholder="Enter your password">
                    <span class="toggle-password" onclick="togglePassword('password')">👁️</span>
                    <div class="error" id="passwordError"></div>
                </div>
                <div id="confirmPasswordGroup" class="input-group password-wrapper" style="display: none;">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password">
                    <span class="toggle-password" onclick="togglePassword('confirmPassword')">👁️</span>
                    <div class="error" id="confirmPasswordError"></div>
                </div>
                 <!-- Forgot Password Link (for Login View) -->
                 <a href="#" id="forgotPasswordLink" style="font-size: 12px; color: #555; text-decoration: none; display: block; margin-bottom: 15px;">Forgot Your Password?</a>

                <button type="submit" id="submitButton">SIGN IN</button> <!-- Dynamic text -->
            </form>
            <!-- This toggle link is now handled by the overlay buttons -->
            <!-- <div class="signup-link">
                <span id="toggleLink">Don't have an account? <a href="javascript:void(0);" onclick="toggleForm()">Sign Up</a></span>
            </div> -->
        </div>

        <!-- Overlay Container -->
        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-left">
                     <!-- Content for when SIGN UP form is visible -->
                    <h2>Welcome Back!</h2>
                    <p>To keep connected with us please login with your personal info</p>
                    <button class="ghost" id="signInButton" onclick="toggleForm()">Sign In</button>
                </div>
                <div class="overlay-panel overlay-right">
                     <!-- Content for when SIGN IN form is visible -->
                    <h2>Hello, Friend!</h2>
                    <p>Enter your personal details and start journey with us</p>
                    <button class="ghost" id="signUpButton" onclick="toggleForm()">Sign Up</button>
                </div>
            </div>
        </div>

    </div>

    <script>
        let isLogin = true; // Start in Sign In mode

        // Get references to elements
        const container = document.getElementById("container");
        const formTitle = document.getElementById("formTitle");
        const confirmPasswordGroup = document.getElementById("confirmPasswordGroup");
        const usernameGroup = document.getElementById("usernameGroup"); // Added username group
        const submitButton = document.getElementById("submitButton");
        const formHint = document.getElementById("formHint");
        const forgotPasswordLink = document.getElementById("forgotPasswordLink");

        // --- Initial State Setup ---
        confirmPasswordGroup.style.display = "none";
        usernameGroup.style.display = "none"; // Hide username initially
        formTitle.textContent = "Sign In";
        submitButton.textContent = "SIGN IN";
        formHint.textContent = "or use your email account";
        forgotPasswordLink.style.display = 'block'; // Show forgot password

        function toggleForm() {
            isLogin = !isLogin; // Toggle the state

            container.classList.toggle("sign-up-mode"); // This class controls the animation/overlay shift

            if (isLogin) {
                // --- Switch to Sign In View ---
                formTitle.textContent = "Sign In";
                submitButton.textContent = "SIGN IN";
                formHint.textContent = "or use your email account";
                confirmPasswordGroup.style.display = "none"; // Hide confirm password
                usernameGroup.style.display = "none"; // Hide username
                forgotPasswordLink.style.display = 'block'; // Show forgot password
                 // Clear potential signup errors
                document.getElementById("usernameError").textContent = "";
                document.getElementById("confirmPasswordError").textContent = "";

            } else {
                // --- Switch to Sign Up View ---
                formTitle.textContent = "Create Account";
                submitButton.textContent = "SIGN UP";
                formHint.textContent = "or use your email for registration";
                confirmPasswordGroup.style.display = "block"; // Show confirm password
                usernameGroup.style.display = "block"; // Show username
                forgotPasswordLink.style.display = 'none'; // Hide forgot password
                 // Clear potential login errors
                // (email/password fields are reused, so errors are cleared in handleSubmit)
            }
             // Clear errors on toggle
             document.getElementById("emailError").textContent = "";
             document.getElementById("passwordError").textContent = "";
             document.getElementById("confirmPasswordError").textContent = "";
             document.getElementById("usernameError").textContent = ""; // Clear username error too
             // Reset form fields (optional, but good practice)
             document.getElementById('authForm').reset();
        }

        function togglePassword(id) {
            const input = document.getElementById(id);
            const eyeIcon = input.nextElementSibling; // Get the span next to the input
            if (input.type === 'password') {
                input.type = 'text';
                eyeIcon.textContent = '🙈'; // Change icon to indicate visible
            } else {
                input.type = 'password';
                eyeIcon.textContent = '👁️'; // Change icon back
            }
        }

        // --- Validation Function ---
        function validateForm() {
             let isValid = true;
             // Reset errors
             document.getElementById("emailError").textContent = "";
             document.getElementById("passwordError").textContent = "";
             document.getElementById("confirmPasswordError").textContent = "";
             document.getElementById("usernameError").textContent = ""; // Reset username error

             const email = document.getElementById("email").value.trim();
             const password = document.getElementById("password").value.trim();
             const username = document.getElementById("username")?.value.trim(); // Get username if signup
             const confirmPassword = document.getElementById("confirmPassword")?.value.trim(); // Get confirm pass if signup

              // --- Email Validation ---
             if (!email) {
                  document.getElementById("emailError").textContent = "Email is required.";
                  isValid = false;
             } else if (!email.endsWith("@shivalikbank.com")) {
                document.getElementById("emailError").textContent = "Email must end with @shivalikbank.com.";
                isValid = false;
             }

             // --- Password Validation ---
             const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{6,}$/;
             if (!password) {
                 document.getElementById("passwordError").textContent = "Password is required.";
                 isValid = false;
             } else if (!passwordRegex.test(password)) {
                 document.getElementById("passwordError").textContent = "Min. 6 chars, with uppercase, number, and special character.";
                 isValid = false;
             }

             // --- Signup Specific Validation ---
             if (!isLogin) {
                 // Username Validation (Example: not empty)
                 if (!username) {
                    document.getElementById("usernameError").textContent = "Username is required for signup.";
                    isValid = false;
                 }
                 // Confirm Password Validation
                 if (!confirmPassword) {
                     document.getElementById("confirmPasswordError").textContent = "Please confirm your password.";
                     isValid = false;
                 } else if (password && password !== confirmPassword) { // Only check if password itself is present
                     document.getElementById("confirmPasswordError").textContent = "Passwords do not match.";
                     isValid = false;
                 }
             }

             return isValid;
        }


        // --- Submit Handler ---
        async function handleSubmit(event) {
            event.preventDefault(); // Prevent default form submission

            // Validate form using the dedicated function
            const isValid = validateForm();

            if (isValid) {
                // Gather form data
                const email = document.getElementById("email").value.trim();
                const password = document.getElementById("password").value.trim();
                let formData = {
                    // Send 'username' field as the email for login consistency with backend expectation
                    username: email,
                    password,
                };

                // Add signup-specific fields if in signup mode
                if (!isLogin) {
                    const signupUsername = document.getElementById("username").value.trim();
                    formData = {
                        username: signupUsername, // Actual chosen username for signup
                        email: email,            // Email for signup
                        password,                // Password
                        // No need to send confirmPassword to backend
                    };
                }

                const targetUrl = isLogin ? '/login' : '/signup';
                console.log(`Sending POST request to ${targetUrl} with data:`, formData);

                try {
                    // Send POST request
                    const response = await fetch(targetUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    console.log(`Response received from ${targetUrl}. Status: ${response.status}`);

                    // --- Handle NON-OK Responses (Errors: 4xx, 5xx) ---
                    if (!response.ok) {
                        let errorMessage = `Error: ${response.status} ${response.statusText}`;
                        let rawResponseBody = '';
                        try {
                            rawResponseBody = await response.text();
                            // Try to parse as JSON to get server's specific message if available
                            try {
                                const errorData = JSON.parse(rawResponseBody);
                                if (errorData && errorData.message) {
                                     errorMessage += `\nServer: ${errorData.message}`;
                                } else {
                                     errorMessage += `\nServer Response: ${rawResponseBody.substring(0, 200)}${rawResponseBody.length > 200 ? '...' : ''}`;
                                }
                            } catch (jsonError) {
                                // If not JSON, use the raw text snippet
                                errorMessage += `\nServer Response: ${rawResponseBody.substring(0, 200)}${rawResponseBody.length > 200 ? '...' : ''}`;
                            }
                             console.error(`Raw ${response.status} Response Body from ${targetUrl}:`, rawResponseBody); // Log full raw response

                        } catch (readError) {
                            console.error("Failed to read response body as text:", readError);
                            errorMessage += " (Failed to read response body)";
                        }
                        alert(errorMessage); // Show combined error message
                        return; // Stop processing on error
                    }

                    // --- Handle OK Responses (Success: 2xx) ---
                    // ASSUMPTION: Server successfully processed request. The server *might* have sent
                    // HTML (like home.ejs) or just a success status. Fetch doesn't navigate automatically.
                    // We trigger the navigation manually using window.location.href.

                    console.log(`Server responded OK to ${targetUrl}. Redirecting client-side to /home.`);

                    const successMessage = isLogin ? "Login Successful! Redirecting..." : "Signup Successful! Please login.";
                    alert(successMessage);

                     // Redirect on success
                    if (isLogin) {
                        window.location.href = "/home"; // Redirect to home after login
                    } else {
                         // After successful signup, maybe toggle back to login form instead of redirecting home
                         toggleForm(); // Switch back to login view
                         alert("Signup complete! Please sign in."); // Inform user
                         // Or redirect to login page explicitly if it's different:
                         // window.location.href = "/"; // Or wherever login page is
                    }

                } catch (networkError) {
                     // Handle Fetch/Network Errors
                     console.error("Network or fetch error:", networkError);
                     alert("Failed to connect to the server. Please check your network connection and try again.");
                }

            } else {
                 // Form validation failed
                 console.log("Client-side validation failed.");
                 // No need for an alert here, as errors are shown below fields
                 // alert("Please correct the errors indicated in the form.");
            }
        }
    </script>
</body>
</html>