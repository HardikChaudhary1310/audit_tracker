<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <title>Login and Sign-Up</title>
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Basic Styles */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
            background: linear-gradient(90deg, #674dcd, rgb(56, 131, 196), #52d7ee);
            transition: background-color 0.36s, box-shadow 0.5s;
            background-image: var(--gradient);
            /* Keep only one background definition, the gradient is likely preferred */
            /* animation: gradientBackground 10s infinite; */ /* Animation can be distracting, optional */
        }

       /* @keyframes gradientBackground {
           0% { background: linear-gradient(to bottom, #674dcd, #f0f8ff); background-position: left; }
           25% { background: linear-gradient(to bottom, #674dcd, #f0f8ff); background-position: right; }
           50% { background: linear-gradient(to bottom, #674dcd, #f0f8ff); background-position: left; }
           75% { background: linear-gradient(to bottom, #674dcd, #f0f8ff); background-position: right; }
           100% { background: linear-gradient(to bottom, #674dcd, #f0f8ff); background-position: left; }
       } */

        .container {
            position: relative;
            width: 768px;
            max-width: 95%; /* Better responsiveness on smaller screens */
            min-height: 520px; /* Adjusted slightly for new field */
            background-color: #fff; /* Base background for form containers */
            border-radius: 35px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.40);
            overflow: hidden;
            display: flex; /* Removed, as inner elements use absolute positioning */
        }

        .form-container, .overlay-panel { /* Renamed overlay-container parts for clarity */
            position: absolute;
            top: 0;
            height: 100%;
            transition: all 0.6s ease-in-out; /* Changed from just transform */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 0 40px; /* Padding inside */
            text-align: center;
        }

        .sign-in-container {
            left: 0;
            width: 50%;
            z-index: 2;
            background-color: white; /* Explicit background */
        }
        .sign-up-container {
            left: 0;
            width: 50%;
            opacity: 0; /* Initially hidden */
            z-index: 1;
            background-color: white; /* Explicit background */
        }

        /* Container active states for sliding */
        .container.right-panel-active .sign-in-container {
            transform: translateX(100%);
            opacity: 0; /* Fade out */
        }
        .container.right-panel-active .sign-up-container {
            transform: translateX(100%);
            opacity: 1; /* Fade in */
            z-index: 5;
            animation: show 0.6s; /* Simple fade-in */
        }

        @keyframes show {
            0%, 49.99% { opacity: 0; z-index: 1; }
            50%, 100% { opacity: 1; z-index: 5; }
        }

        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%; /* Starts covering the right half */
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100; /* Above forms */
        }

        .container.right-panel-active .overlay-container {
            transform: translateX(-100%); /* Slides left */
        }

        .overlay {
            background: linear-gradient(to bottom right, #6318b4, #3572da);
            color: white;
            position: relative;
            left: -100%; /* Positioned for sliding */
            height: 100%;
            width: 200%; /* Double width to cover slide */
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .container.right-panel-active .overlay {
            transform: translateX(50%); /* Slides to reveal the other panel */
        }

        .overlay-panel {
            width: 50%; /* Panels take half the overlay width */
            top:0; /* Align properly */
            /* display: flex; */ /* Already defined above */
            /* flex-direction: column; */ /* Already defined above */
            /* justify-content: center; */ /* Already defined above */
            /* align-items: center; */ /* Already defined above */
            /* padding: 0 40px; */ /* Already defined above */
            /* text-align: center; */ /* Already defined above */
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
            color: white; /* Ensure text is white */
        }

        .overlay-left {
            transform: translateX(-20%); /* Initially off-screen left */
        }
        .container.right-panel-active .overlay-left {
            transform: translateX(0); /* Slides in */
        }

        .overlay-right {
            right: 0;
            transform: translateX(0); /* Initially visible */
        }
        .container.right-panel-active .overlay-right {
            transform: translateX(20%); /* Slides off-screen right */
        }


        h2, h3 { /* Adjusted heading margins */
             margin: 0 0 15px 0;
             font-weight: bold;
        }
        h3 { font-size: 1.8em; } /* Slightly larger form titles */


        .social-login { /* Simplified social login - kept structure */
            margin: 15px 0;
        }
        .social-login a {
            border: 1px solid #ddd;
            border-radius: 50%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 0 5px;
            height: 40px;
            width: 40px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        .social-login a:hover {
            background-color: #eee;
            color: #512da8;
        }

        span.info-text { /* For 'or use email' text */
            font-size: 12px;
            margin-bottom: 10px;
            display: block;
        }

        .input-group {
            margin-bottom: 15px;
            width: 100%;
            background-color: #f9f9f9; /* Move background to group */
            border-radius: 15px; /* Rounded corners for the group */
            display: flex; /* Align icon and input */
            align-items: center;
            border: 1px solid #ccc; /* Add border to group */
        }
        .input-group i { /* Style for potential icons */
            padding: 0 15px;
            color: #aaa;
        }

        label {
            /* display: block; */ /* No longer needed with placeholder */
            /* font-weight: bold; */
            /* margin-bottom: 5px; */
            display: none; /* Hide labels, use placeholders */
        }

        input {
            flex-grow: 1; /* Input takes remaining space */
            /* width: 100%; */ /* Let flexbox handle width */
            border: none; /* Remove individual input border */
            background-color: transparent; /* Use group background */
            padding: 14px 10px 14px 0; /* Adjust padding */
            font-size: 14px; /* Slightly larger font */
            border-radius: 0; /* Remove individual radius */
            outline: none;
        }
        input:-webkit-autofill, /* Handle browser autofill style */
        input:-webkit-autofill:hover,
        input:-webkit-autofill:focus,
        input:-webkit-autofill:active {
            -webkit-box-shadow: 0 0 0 30px #f9f9f9 inset !important;
            box-shadow: 0 0 0 30px #f9f9f9 inset !important; /* Match background */
             -webkit-text-fill-color: #333 !important; /* Ensure text color is visible */
        }


        .password-wrapper {
            position: relative; /* Needed for absolute positioning of toggle */
        }

        .toggle-password {
            /* position: absolute; */ /* No longer absolute */
            /* right: 10px; */
            /* top: 50%; */ /* Center vertically */
            /* transform: translateY(-50%); */
            padding-right: 15px; /* Space for the icon */
            cursor: pointer;
            font-size: 16px; /* Larger icon */
            color: #777;
        }

        .toggle-password:hover {
            color: #333;
        }

        button, .ghost-button { /* Style buttons consistently */
            width: auto; /* Adjust width based on content */
            min-width: 150px; /* Minimum width */
            padding: 12px 45px;
            background-color: #512da8;
            color: #fff;
            font-size: 12px;
            font-weight: bold;
            letter-spacing: 1px;
            text-transform: uppercase;
            border: 1px solid #512da8;
            border-radius: 20px;
            cursor: pointer;
            transition: transform 80ms ease-in, background-color 0.3s, color 0.3s, border-color 0.3s;
            margin-top: 10px; /* Spacing */
        }

        button:active {
             transform: scale(0.95);
        }
        button:focus, .ghost-button:focus {
            outline: none;
        }

        button:hover {
             background-color: #673ab7; /* Darker purple on hover */
        }

        /* Ghost button style for overlay */
        .ghost-button {
            background-color: transparent;
            border-color: #fff; /* White border */
            color: #fff;
        }
        .ghost-button:hover {
            background-color: #fff; /* White background on hover */
            color: #512da8; /* Purple text */
        }


        .signup-link { /* Replaced by overlay buttons */
           display: none;
        }

        .error {
            color: red;
            font-size: 12px; /* Smaller error text */
            margin-top: -10px; /* Pull up below input */
            margin-bottom: 10px; /* Add space below error */
            text-align: left; /* Align error text left */
            padding-left: 15px; /* Indent error text */
            min-height: 15px; /* Reserve space even when empty */
             display: block; /* Ensure it takes space */
             width: 100%;
        }

        a.forgot-password { /* Style for forgot password link */
             color: #333;
             font-size: 12px;
             text-decoration: none;
             margin: 15px 0;
             display: inline-block;
        }
        a.forgot-password:hover {
            text-decoration: underline;
        }


    </style>
</head>
<body>
    <div class="container" id="container">

        <!-- Sign Up Container -->
        <div class="form-container sign-up-container">
            <form id="signUpForm" onsubmit="handleSubmit(event)">
                <h3>Create Account</h3>
                <div class="social-login">
                    <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                    <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
                </div>
                <span class="info-text">or use your email for registration</span>
                <!-- *** ADDED USERNAME FIELD *** -->
                <div class="input-group">
                     <i class="fas fa-user"></i>
                    <input type="text" id="signupUsername" name="username" placeholder="Username">
                </div>
                 <div class="error" id="usernameError"></div> <!-- Error placeholder -->

                <div class="input-group">
                     <i class="fas fa-envelope"></i>
                    <input type="email" id="signupEmail" name="email" placeholder="Email (e.g., name@shivalikbank.com)">
                </div>
                 <div class="error" id="signupEmailError"></div>

                <div class="input-group password-wrapper">
                     <i class="fas fa-lock"></i>
                    <input type="password" id="signupPassword" name="password" placeholder="Password">
                    <span class="toggle-password" onclick="togglePassword('signupPassword', this)">👁️</span>
                </div>
                 <div class="error" id="signupPasswordError"></div>

                <div class="input-group password-wrapper">
                     <i class="fas fa-lock"></i>
                    <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password">
                    <span class="toggle-password" onclick="togglePassword('confirmPassword', this)">👁️</span>
                </div>
                <div class="error" id="confirmPasswordError"></div>

                <button type="submit">Sign Up</button>
            </form>
        </div>

        <!-- Sign In Container -->
        <div class="form-container sign-in-container">
            <form id="signInForm" onsubmit="handleSubmit(event)">
                <h3>Sign In</h3>
                <div class="social-login">
                    <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                    <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
                </div>
                <span class="info-text">or use your account</span>
                <div class="input-group">
                     <i class="fas fa-envelope"></i>
                    <input type="email" id="signInEmail" name="email" placeholder="Email (e.g., name@shivalikbank.com)">
                </div>
                 <div class="error" id="signInEmailError"></div>

                <div class="input-group password-wrapper">
                     <i class="fas fa-lock"></i>
                    <input type="password" id="signInPassword" name="password" placeholder="Password">
                    <span class="toggle-password" onclick="togglePassword('signInPassword', this)">👁️</span>
                </div>
                 <div class="error" id="signInPasswordError"></div>

                <a href="#" class="forgot-password">Forgot your password?</a>
                <button type="submit">Sign In</button>
            </form>
        </div>

         <!-- Overlay Container -->
        <div class="overlay-container">
            <div class="overlay">
                 <!-- Overlay Panel Left (Shown when Sign In is active) -->
                <div class="overlay-panel overlay-left">
                    <h2>Welcome Back!</h2>
                    <p>To keep connected with us please login with your personal info</p>
                    <button class="ghost-button" id="signInButton">Sign In</button>
                </div>
                 <!-- Overlay Panel Right (Shown when Sign Up is active) -->
                <div class="overlay-panel overlay-right">
                    <h2>Hi, Friend!</h2>
                    <p>Enter your personal details and start journey with us</p>
                    <button class="ghost-button" id="signUpButton">Sign Up</button>
                </div>
            </div>
        </div>

    </div>

    <script>
        const signUpButton = document.getElementById('signUpButton');
        const signInButton = document.getElementById('signInButton');
        const container = document.getElementById('container');

        // --- State Tracking ---
        let isLogin = true; // Initially showing the Login form

        // --- Event Listeners for Overlay Buttons ---
        signUpButton.addEventListener('click', () => {
            container.classList.add("right-panel-active");
            isLogin = false;
            clearErrors(); // Clear errors when switching
            // No need to clear fields usually when going TO signup
            setRequiredAttributes();
        });

        signInButton.addEventListener('click', () => {
            container.classList.remove("right-panel-active");
            isLogin = true;
            clearErrors(); // Clear errors when switching
            clearSignupFields(); // Clear signup fields when switching back to login
             setRequiredAttributes();
        });

        // --- Function to Clear All Error Messages ---
        function clearErrors() {
            const errorElements = document.querySelectorAll('.error');
            errorElements.forEach(el => el.textContent = '');
        }

         // --- Function to Clear Signup Specific Fields ---
        function clearSignupFields() {
            document.getElementById('signUpForm').reset(); // Resets the signup form
        }

         // --- Function to Set Required Attributes Based on Mode ---
         function setRequiredAttributes() {
             // Sign In Fields
             document.getElementById('signInEmail').required = isLogin;
             document.getElementById('signInPassword').required = isLogin;

             // Sign Up Fields
             document.getElementById('signupUsername').required = !isLogin;
             document.getElementById('signupEmail').required = !isLogin;
             document.getElementById('signupPassword').required = !isLogin;
             document.getElementById('confirmPassword').required = !isLogin;
         }


        // --- Toggle Password Visibility ---
        function togglePassword(id, eyeIcon) {
            const input = document.getElementById(id);
            if (input.type === 'password') {
                input.type = 'text';
                eyeIcon.textContent = '🙈'; // Change icon
            } else {
                input.type = 'password';
                 eyeIcon.textContent = '👁️'; // Change icon back
            }
        }

        // --- Form Validation ---
        function validateForm() {
            clearErrors(); // Clear previous errors first
            let isValid = true;

            if (isLogin) {
                // --- Login Validation ---
                const email = document.getElementById("signInEmail").value.trim();
                const password = document.getElementById("signInPassword").value.trim();
                const emailError = document.getElementById("signInEmailError");
                const passwordError = document.getElementById("signInPasswordError");

                // Email
                if (!email) {
                    emailError.textContent = "Email is required.";
                    isValid = false;
                } else if (!email.endsWith("@shivalikbank.com")) {
                    emailError.textContent = "Email must end with @shivalikbank.com.";
                    isValid = false;
                }

                // Password
                if (!password) {
                    passwordError.textContent = "Password is required.";
                    isValid = false;
                } // Add more password checks if needed for login

            } else {
                // --- Signup Validation ---
                const username = document.getElementById("signupUsername").value.trim();
                const email = document.getElementById("signupEmail").value.trim();
                const password = document.getElementById("signupPassword").value.trim();
                const confirmPassword = document.getElementById("confirmPassword").value.trim();

                const usernameError = document.getElementById("usernameError"); // Now this exists!
                const emailError = document.getElementById("signupEmailError");
                const passwordError = document.getElementById("signupPasswordError");
                const confirmPasswordError = document.getElementById("confirmPasswordError");

                 // Username (Example: Must not be empty)
                 if (!username) {
                     usernameError.textContent = "Username is required.";
                     isValid = false;
                 } // Add other username rules (length, characters) if needed

                // Email
                if (!email) {
                    emailError.textContent = "Email is required.";
                    isValid = false;
                } else if (!email.endsWith("@shivalikbank.com")) {
                    emailError.textContent = "Email must end with @shivalikbank.com.";
                    isValid = false;
                }

                // Password
                const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{6,}$/;
                if (!password) {
                    passwordError.textContent = "Password is required.";
                    isValid = false;
                } else if (!passwordRegex.test(password)) {
                    passwordError.textContent = "Min. 6 chars, incl. uppercase, number, and special char.";
                    isValid = false;
                }

                // Confirm Password
                if (!confirmPassword) {
                    confirmPasswordError.textContent = "Please confirm your password.";
                    isValid = false;
                } else if (password && password !== confirmPassword) {
                    confirmPasswordError.textContent = "Passwords do not match.";
                    isValid = false;
                }
            }

            console.log("Validation result:", isValid);
            return isValid;
        }

        // --- Submit Handler ---
        async function handleSubmit(event) {
            event.preventDefault(); // Prevent default form submission

            if (!validateForm()) {
                 console.log("Client-side validation failed.");
                 return; // Stop submission if validation fails
            }

             // Validation passed, proceed with submission logic
            let formData = {};
            let targetUrl = '';

            if (isLogin) {
                const email = document.getElementById("signInEmail").value.trim();
                const password = document.getElementById("signInPassword").value.trim();
                formData = { username: email, password }; // Use email as username for login API
                targetUrl = '/login'; // Assumed endpoint
            } else {
                const username = document.getElementById("signupUsername").value.trim();
                const email = document.getElementById("signupEmail").value.trim();
                const password = document.getElementById("signupPassword").value.trim();
                // Include email AND username for signup
                formData = { username: username, email: email, password: password };
                targetUrl = '/signup'; // Assumed endpoint
            }


            console.log(`Sending POST request to ${targetUrl} with data:`, JSON.stringify(formData)); // Log stringified data

            try {
                const response = await fetch(targetUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData),
                });

                console.log(`Response received from ${targetUrl}. Status: ${response.status}`);

                // --- Handle NON-OK Responses (Errors: 4xx, 5xx) ---
                if (!response.ok) {
                    let errorMessage = `Error: ${response.status} ${response.statusText}`;
                    let rawResponseBody = '';
                    try {
                        rawResponseBody = await response.text(); // Always try to get text first
                        console.error(`Raw ${response.status} Response Body from ${targetUrl}:`, rawResponseBody);
                        try { // Try parsing potential JSON error message from server
                            const errorData = JSON.parse(rawResponseBody);
                            if (errorData && errorData.message) {
                                errorMessage += `\nServer: ${errorData.message}`;
                             } else if (errorData) { // If JSON but no message field
                                 errorMessage += `\nServer Response: ${JSON.stringify(errorData)}`;
                             } else { // If rawResponseBody was empty or not JSON parsable but we got text
                                 errorMessage += `\nServer Response: ${rawResponseBody.substring(0, 200)}${rawResponseBody.length > 200 ? '...' : ''}`;
                            }
                        } catch (jsonError){ // If response wasn't JSON, use raw text
                             errorMessage += `\nServer Response: ${rawResponseBody.substring(0, 200)}${rawResponseBody.length > 200 ? '...' : ''}`;
                        }
                    } catch (readError) {
                        console.error("Failed to read response body as text:", readError);
                        errorMessage += " (Failed to read response body)";
                    }
                     // Display specific errors if available, otherwise generic
                     if (isLogin) {
                         document.getElementById('signInPasswordError').textContent = `Login failed. ${response.status === 401 ? 'Invalid credentials.' : 'Please try again.'}`;
                     } else {
                         document.getElementById('confirmPasswordError').textContent = `Signup failed. ${response.status === 409 ? 'Email or Username may already exist.' : 'Please try again.'}`;
                     }
                     alert(errorMessage); // Also show detailed alert
                     return; // Stop processing on error
                 }

                 // --- Handle OK Responses (Success: 2xx) ---
                 if (isLogin) {
                     // LOGIN SUCCESS: Server might redirect OR send data/HTML.
                     // Assuming server sends redirect or minimal JSON on success
                     console.log("Login successful. Checking response type...");
                      // If server sends back the page content (less common for APIs)
                     // const responseBody = await response.text();
                     // if (responseBody.toLowerCase().includes('<html')) {
                     //     document.open();
                     //     document.write(responseBody);
                     //     document.close();
                     //     return; // Stop JS execution
                     // }

                     // More likely: Server sends JSON confirmation or redirects.
                     try {
                        const data = await response.json().catch(() => null); // Attempt to parse JSON, ignore if fails
                         if(data && data.redirectUrl) {
                             console.log("Redirecting to:", data.redirectUrl);
                             window.location.href = data.redirectUrl;
                         } else if (data) {
                              console.log("Login success data:", data);
                              alert(data.message || "Login Successful!");
                              // Potentially redirect to a default home page if no redirect URL provided
                              window.location.href = "/home"; // Example redirect
                         }
                         else {
                             // If response is OK but not JSON, maybe just redirect
                              console.log("Login successful (non-JSON response), redirecting to /home");
                              alert("Login Successful! Redirecting...");
                              window.location.href = "/home"; // Manually navigate
                         }
                     } catch(e) { // Catch potential errors during JSON parse or redirect logic
                          console.error("Error processing login success response:", e);
                          alert("Login processed, but encountered an issue navigating. Redirecting manually.");
                          window.location.href = "/home";
                     }


                 } else {
                     // SIGNUP SUCCESS: Expecting JSON confirmation
                     console.log("Signup successful response received. Attempting to parse JSON...");
                     try {
                         const data = await response.json(); // Expecting JSON here
                         console.log("Signup success data from server:", data);
                         alert(data.message || "Signup Successful! Please check your email or sign in.");

                         // Switch back to login view after successful signup
                         container.classList.remove("right-panel-active");
                         isLogin = true;
                         clearErrors();
                         clearSignupFields();
                         setRequiredAttributes();
                         // Optionally focus the login email field
                         document.getElementById('signInEmail').focus();

                     } catch (jsonError) {
                         console.error("Failed to parse JSON response from /signup:", jsonError);
                         // Maybe the server sent plain text confirmation?
                         const rawBody = await response.text(); // Read it again as text
                         console.error("Raw non-JSON response body from /signup:", rawBody);
                         alert("Signup request processed, but response format was unexpected. Check console. Switching to Sign In.");
                         // Still switch to login as the action likely succeeded server-side
                         container.classList.remove("right-panel-active");
                         isLogin = true;
                         clearErrors();
                         clearSignupFields();
                         setRequiredAttributes();
                     }
                 }

             } catch (networkError) {
                 // Handle Fetch/Network Errors
                 console.error("Network or fetch error:", networkError);
                  const errorMsg = "Failed to connect to the server. Please check your network connection and try again.";
                  // Display error message in a relevant place
                  if(isLogin) {
                      document.getElementById('signInPasswordError').textContent = errorMsg;
                  } else {
                       document.getElementById('confirmPasswordError').textContent = errorMsg;
                  }
                  alert(errorMsg);
             }
         }

         // Initialize required attributes on page load
         setRequiredAttributes();

    </script>
</body>
</html>