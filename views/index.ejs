<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Using Font Awesome 6 for newer icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <title>Login and Sign-Up</title>
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Basic Styles */
        body {
            font-family: 'Arial', sans-serif; /* Consistent font */
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
            background: linear-gradient(90deg, #674dcd, rgb(56, 131, 196), #52d7ee);
            background-size: 400% 400%; /* Needed for animation */
            animation: gradientBackground 15s ease infinite; /* Smoother, longer animation */
            overflow: hidden;
        }

        @keyframes gradientBackground {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            position: relative;
            width: 768px;
            max-width: 95%;
            min-height: 520px; /* Increased slightly */
            border-radius: 15px;
            box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22); /* More pronounced shadow */
            overflow: hidden;
            display: flex; /* Needed for absolute positioning inside */
            background-color: #ffffff;
        }

        /* Form Container Base */
        .form-container {
            position: absolute;
            top: 0;
            height: 100%;
            transition: all 0.6s ease-in-out;
            display: flex; /* Enable flex for alignment */
            flex-direction: column;
            justify-content: center; /* Center content vertically */
            align-items: center; /* Center content horizontally */
            width: 50%;
            padding: 0 50px; /* Horizontal padding */
            text-align: center; /* Center text elements */
        }

        .form-container h3 {
            margin-bottom: 15px; /* Reduced margin */
            font-weight: bold;
            color: #333;
        }

        .input-group {
            margin-bottom: 15px; /* Consistent spacing */
            width: 100%;
            position: relative; /* Needed for absolute icon */
        }

        input {
            width: 100%;
            border: 1px solid #eee; /* Lighter border */
            background-color: #eee; /* Input background */
            padding: 12px 15px;
             padding-right: 40px; /* Make space for icon */
            font-size: 14px;
            border-radius: 8px;
            outline: none;
            transition: border-color 0.3s;
        }
        input:focus {
            border-color: #674dcd;
            background-color: #fff; /* White on focus */
        }
        /* Remove separate labels, use placeholders */

        .password-wrapper {
            position: relative; /* Already set in .input-group */
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            font-size: 16px;
            color: #aaa;
            transition: color 0.3s;
            z-index: 3; /* Ensure icon is clickable */
        }
        .toggle-password:hover {
            color: #674dcd;
        }

        button[type="submit"] {
            display: inline-block; /* Allow auto width */
            min-width: 150px;
            padding: 12px 45px;
            background: linear-gradient(90deg, #512da8, #7b1fa2);
            color: #fff;
            font-size: 14px;
            font-weight: bold;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-top: 15px;
            margin-bottom: 10px; /* Space below button */
        }
        button[type="submit"]:hover {
            background: linear-gradient(90deg, #7b1fa2, #512da8);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
            transform: translateY(-2px);
        }
        button[type="submit"]:disabled {
             background: linear-gradient(90deg, #cccccc, #bbbbbb); /* Grey gradient when disabled */
             cursor: not-allowed;
             opacity: 0.7;
             transform: translateY(0); /* No hover effect */
             box-shadow: none;
        }
        button[type="submit"]:active {
            transform: translateY(1px); /* Press down */
             box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }

        .message-area {
             width: 100%;
             min-height: 25px;
             text-align: center;
             margin-top: 8px;
             margin-bottom: 8px;
             font-weight: bold;
             font-size: 14px;
             line-height: 1.4; /* Improve readability */
        }
        .message-area.success {
             color: #28a745;
        }
         .message-area.error {
             color: #dc3545;
        }

        .error { /* Specific input error styling */
            color: #dc3545;
            font-size: 12px;
            margin-top: 4px;
            min-height: 16px;
            text-align: left; /* Align error text left */
            width: 100%;
             padding-left: 5px; /* Slight indent */
        }

        /* Overlay styles */
        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100; /* Above forms initially */
        }
        .overlay {
            background: linear-gradient(to right, #6318b4, #3572da); /* Adjusted gradient */
            color: #fff;
            position: relative;
            left: -100%;
            height: 100%;
            width: 200%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }
        .overlay-panel {
            position: absolute;
            top: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 0 40px;
            height: 100%;
            width: 50%;
            text-align: center;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }
        .overlay-left {
            transform: translateX(-20%);
        }
        .overlay-right {
            right: 0;
            transform: translateX(0);
        }
        .overlay h3 {
            margin-bottom: 15px;
            font-weight: bold;
        }
        .overlay p {
            margin-bottom: 25px;
            font-size: 14px;
            line-height: 1.5;
        }
        button.ghost {
            background: transparent;
            border: 2px solid #fff;
            color: #fff;
            font-size: 12px;
            font-weight: bold;
            padding: 10px 40px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        button.ghost:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        button.ghost:active {
            transform: scale(0.98);
        }

        /* Animation / Panel Switching */
        .container.right-panel-active .sign-in-container {
            transform: translateX(100%);
             opacity: 0; /* Fade out */
        }
        .container.right-panel-active .sign-up-container {
            transform: translateX(100%);
            opacity: 1;
            z-index: 5;
            animation: show 0.6s;
        }
        .container.right-panel-active .overlay-container {
            transform: translateX(-100%);
        }
        .container.right-panel-active .overlay {
            transform: translateX(50%);
        }
        .container.right-panel-active .overlay-left {
            transform: translateX(0); /* Bring left panel in */
        }
        .container.right-panel-active .overlay-right {
            transform: translateX(20%); /* Move right panel away */
        }

        .sign-in-container {
            left: 0; width: 50%; z-index: 2; opacity: 1;
        }
        .sign-up-container {
            left: 0; width: 50%; opacity: 0; z-index: 1;
        }

        @keyframes show {
            0%, 49.99% { opacity: 0; z-index: 1; }
            50%, 100% { opacity: 1; z-index: 5; }
        }

         /* Make forms feel less cramped */
         #signInForm, #signUpForm {
            width: 100%;
             display: flex;
             flex-direction: column;
             align-items: center;
         }

    </style>
</head>
<body>
    <div class="container" id="container">

        <!-- Sign Up Form -->
        <div class="form-container sign-up-container">
            <form id="signUpForm" onsubmit="handleSubmit(event)">
                <h3>Create Account</h3>
                <div class="message-area" id="signUpMessageArea"></div> <!-- Message area -->
                <div class="input-group">
                    <input type="email" id="signUpEmail" name="email" required placeholder="Email (@shivalikbank.com)">
                    <div class="error" id="signUpEmailError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="signUpPassword" name="password" required placeholder="Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('signUpPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="signUpPasswordError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Confirm Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('confirmPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="confirmPasswordError"></div>
                </div>
                <button type="submit">Sign Up</button>
            </form>
        </div>

        <!-- Sign In Form -->
        <div class="form-container sign-in-container">
            <form id="signInForm" onsubmit="handleSubmit(event)">
                <h3>Sign In</h3>
                <div class="message-area" id="signInMessageArea"></div> <!-- Message area -->
                <div class="input-group">
                    <input type="email" id="signInEmail" name="email" required placeholder="Email (@shivalikbank.com)">
                    <div class="error" id="signInEmailError"></div>
                </div>
                <div class="input-group password-wrapper">
                    <input type="password" id="signInPassword" name="password" required placeholder="Password">
                    <span class="toggle-password" onclick="togglePasswordVisibility('signInPassword')"><i class="fa-regular fa-eye"></i></span>
                    <div class="error" id="signInPasswordError"></div>
                </div>
                <!-- Add forgot password link if needed -->
                <button type="submit">Sign In</button>
            </form>
        </div>

        <!-- Overlay Panels -->
        <div class="overlay-container">
            <div class="overlay">
                 <!-- Left Overlay Panel (Shown when Sign Up is active) -->
                 <div class="overlay-panel overlay-left">
                    <h3>Welcome Back!</h3>
                    <p>Already have an account? Sign in to access your dashboard.</p>
                    <button class="ghost" id="signInButton">Sign In</button>
                </div>
                 <!-- Right Overlay Panel (Shown when Sign In is active) -->
                <div class="overlay-panel overlay-right">
                    <h3>Hello, Friend!</h3>
                    <p>New here? Enter your details and start your journey with us.</p>
                    <button class="ghost" id="signUpButton">Sign Up</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const signUpButton = document.getElementById('signUpButton');
        const signInButton = document.getElementById('signInButton');
        const container = document.getElementById('container');

        // State tracking
        let isLoginActive = true; // Start with Sign In active

        signUpButton.addEventListener('click', () => {
            container.classList.add('right-panel-active');
            isLoginActive = false;
            clearMessagesAndErrors();
        });

        signInButton.addEventListener('click', () => {
            container.classList.remove('right-panel-active');
            isLoginActive = true;
            clearMessagesAndErrors();
        });

        // Toggle password visibility
        function togglePasswordVisibility(inputId) {
            const input = document.getElementById(inputId);
            // Find the icon within the SAME parent (.input-group or .password-wrapper)
            const icon = input.closest('.password-wrapper').querySelector('.toggle-password i');
            if (!input || !icon) return; // Safety check

            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Clear all error/message fields
        function clearMessagesAndErrors() {
            document.querySelectorAll('.error').forEach(el => el.textContent = '');
            document.querySelectorAll('.message-area').forEach(el => {
                el.textContent = '';
                el.className = 'message-area'; // Reset class
            });
        }

        // Main form submission handler
        async function handleSubmit(event) {
            event.preventDefault();
            clearMessagesAndErrors();

            // --- Identify Active Form Elements ---
            const formId = isLoginActive ? 'signInForm' : 'signUpForm';
            const formElement = document.getElementById(formId);
            const emailInput = formElement.querySelector('input[name="email"]');
            const passwordInput = formElement.querySelector('input[name="password"]');
            const emailErrorElem = document.getElementById(isLoginActive ? 'signInEmailError' : 'signUpEmailError');
            const passwordErrorElem = document.getElementById(isLoginActive ? 'signInPasswordError' : 'signUpPasswordError');
            const messageAreaElem = document.getElementById(isLoginActive ? 'signInMessageArea' : 'signUpMessageArea');
            const submitButton = formElement.querySelector('button[type="submit"]');

            let confirmPasswordInput, confirmPasswordErrorElem;
            if (!isLoginActive) {
                confirmPasswordInput = formElement.querySelector('input[name="confirmPassword"]');
                confirmPasswordErrorElem = document.getElementById('confirmPasswordError');
            }

            // --- Get Form Values ---
            const email = emailInput.value.trim();
            const password = passwordInput.value.trim();
            const confirmPassword = !isLoginActive ? confirmPasswordInput.value.trim() : null;

            // --- Frontend Validation ---
            let isValid = true;
            if (!email) {
                emailErrorElem.textContent = "Email is required."; isValid = false;
            } else if (!email.endsWith("@shivalikbank.com")) {
                emailErrorElem.textContent = "Email must end with @shivalikbank.com."; isValid = false;
            }

            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{6,}$/;
            if (!password) {
                passwordErrorElem.textContent = "Password is required."; isValid = false;
            } else if (!passwordRegex.test(password)) {
                passwordErrorElem.textContent = "Min 6 chars: 1 upper, 1 lower, 1 digit, 1 symbol."; isValid = false;
            }

            if (!isLoginActive) {
                if (!confirmPassword) {
                    confirmPasswordErrorElem.textContent = "Please confirm your password."; isValid = false;
                } else if (password && password !== confirmPassword) {
                    confirmPasswordErrorElem.textContent = "Passwords do not match."; isValid = false;
                }
            }

            if (!isValid) {
                messageAreaElem.textContent = "Please fix the errors above.";
                messageAreaElem.className = 'message-area error';
                return;
            }

            // --- Prepare & Send Request ---
            const formData = { username: email, password }; // Backend uses 'username' for email
            if (!isLoginActive) {
                formData.confirmPassword = confirmPassword;
            }

            submitButton.disabled = true;
            submitButton.textContent = isLoginActive ? 'Signing In...' : 'Signing Up...';

            try {
                const response = await fetch(isLoginActive ? '/login' : '/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData),
                });

                // --- Improved Response Handling ---
                let data = {};
                let errorMessage = null;
                const contentType = response.headers.get("content-type");

                if (!response.ok) {
                    if (contentType && contentType.includes("application/json")) {
                        try {
                            data = await response.json();
                            errorMessage = data.message || `Server error (Status: ${response.status})`;
                        } catch (jsonError) {
                            console.error("Failed to parse JSON error response:", jsonError);
                            errorMessage = `Server error (Status: ${response.status}), with invalid error details.`;
                        }
                    } else {
                        // Handle non-JSON error responses (like 502 HTML pages)
                        errorMessage = `Server error (Status: ${response.status}). Please check server logs.`;
                         try {
                             const textResponse = await response.text();
                             console.error("Non-JSON error response body (first 500 chars):", textResponse.substring(0, 500));
                         } catch(textError){}
                    }
                    messageAreaElem.textContent = errorMessage;
                    messageAreaElem.className = 'message-area error';

                } else { // response.ok is true
                     try {
                         // Assume success response is JSON
                         data = await response.json();
                         messageAreaElem.textContent = data.message; // Show success message from backend
                         messageAreaElem.className = 'message-area success';

                        if (isLoginActive) {
                            // Login Success: Redirect after delay
                            submitButton.textContent = 'Success!'; // Keep disabled during redirect
                             console.log("Login successful, redirecting...");
                            setTimeout(() => { window.location.href = "/home"; }, 1500); // Redirect after 1.5s
                        } else {
                            // Signup Success: Inform user, clear form, DO NOT redirect
                            formElement.reset(); // Clear form fields
                            submitButton.textContent = 'Sign Up'; // Reset button text
                            submitButton.disabled = false; // Re-enable signup button
                            console.log("Signup successful, user needs to verify email.");
                        }
                     } catch (jsonSuccessError) {
                         console.error("Failed to parse JSON success response:", jsonSuccessError);
                         messageAreaElem.textContent = "Received an unexpected response format from the server.";
                         messageAreaElem.className = 'message-area error';
                     }
                }
                // --- End Improved Response Handling ---

            } catch (networkError) {
                // Handle network errors (fetch couldn't even reach the server)
                console.error("Network or fetch error:", networkError);
                messageAreaElem.textContent = "Cannot reach server. Please check your connection and try again.";
                messageAreaElem.className = 'message-area error';
            } finally {
                // Re-enable button ONLY IF the process didn't result in a successful login (which redirects)
                 if (!(isLoginActive && messageAreaElem.className.includes('success'))) {
                    submitButton.disabled = false;
                    submitButton.textContent = isLoginActive ? 'Sign In' : 'Sign Up';
                }
            }
        }
    </script>
</body>
</html>